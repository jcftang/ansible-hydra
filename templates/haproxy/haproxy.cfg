#
# {{ ansible_managed }}
#
global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	user haproxy
	group haproxy
	daemon
  stats socket /var/lib/haproxy/stats level admin

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
        contimeout 5000
        clitimeout 50000
        srvtimeout 50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

frontend http_frontend
	bind *:80
	mode http
	option httpclose
	option forwardfor
	default_backend web_server
        acl has_special_uri path_beg /idp/
  	use_backend idp_backend if has_special_uri



#frontend https_frontend
#	bind *:443 ssl crt /etc/dri_app-key-cert.pem
#	mode http
#	option httpclose
#	option forwardfor
#	reqadd X-Forwarded-Proto:\ https
#	default_backend web_server


listen  mysql 0.0.0.0:3306
	mode tcp
	balance roundrobin
{% for host in groups['mysql_replicated'] %}
        server {{ hostvars[host].ansible_hostname }} {{ hostvars[host]['ansible_' + iface].ipv4.address }}:3306 check
{% endfor %}


backend idp_backend
  	mode http
  	balance roundrobin
  	cookie SERVERID insert
{% for host in groups['shibboleth-idp'] %}
        server {{ hostvars[host].ansible_hostname }} {{ hostvars[host]['ansible_' + iface].ipv4.address }}:8080 check cookie {{ hostvars[host].ansible_hostname }}
{% endfor %}



backend web_server
	mode http
	balance roundrobin
	cookie dri_appLB insert indirect nocache
{% for host in groups['dri_app'] %}
	server {{ hostvars[host].ansible_hostname }} {{ hostvars[host]['ansible_' + iface].ipv4.address }}:80 check cookie {{ hostvars[host].ansible_hostname }}
{% endfor %}

listen stats :8080
mode http
stats enable
stats hide-version
stats realm Haproxy\ Statistics
stats uri /
#stats auth Username:Password
